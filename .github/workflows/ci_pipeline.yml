# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: ciroh-ua-website-ci

on:
  push:
    branches: ["main"]
    tags:
      - 'production-*'
  workflow_call:
    # Map the workflow outputs to job outputs
    # https://docs.github.com/en/github-ae@latest/actions/using-workflows/reusing-workflows
  
      
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
  
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
       fetch-depth: 0
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Generate version
      id: version
      run: echo "::set-output name=VERSION::$(date +'%Y%m%d-%H%M%S')"

    - name: Install dependencies
      run: npm ci
      
    # Determine if this is a production build from tag
    - name: Determine build type and version
      id: build-info
      run: |
        if [[ "${{ github.ref }}" == refs/tags/production-* ]]; then
          TAG="${{ github.ref }}"
          VERSION=${TAG#refs/tags/production-}
          echo "DEPLOY_ENV=production" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Building for PRODUCTION environment"
        else
          VERSION=$(date +'%Y%m%d-%H%M%S')
          echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Building for STAGING environment"
        fi
          
    - name: Configure baseUrl
      if: ${{ env.DEPLOY_ENV == 'staging' }}
      run: |
        # Create a backup of the original config
        cp docusaurus.config.js docusaurus.config.js.bak
        
        # Use sed to replace the baseUrl value
        echo "Setting baseUrl for staging"
        sed -i 's|baseUrl: '\''\/'\''|baseUrl: '\''/docuhub-staging/'\''|g' docusaurus.config.js
        sed -i 's|baseUrl: "\/"|baseUrl: "\/docuhub-staging\/"|g' docusaurus.config.js
        
        # Show the changed config
        echo "Modified docusaurus.config.js:"
        cat docusaurus.config.js

    # Build the site
    - name: Build website
      run: npm run build
        
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4
      with:
        # Artifact name
        name: build-${{ env.DEPLOY_ENV }}
        #name: ${{env.GitVersion_SemVer}}
        # A file, directory or wildcard pattern that describes what to upload
        path: build/
        # The desired behavior if no files are found using the provided path.

    - name: Create release
      if: ${{ env.DEPLOY_ENV == 'production' }}
      uses: actions/create-release@v1
      id: create_release
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: v${{env.VERSION}}
          release_name: Release v${{env.VERSION}}
          draft: false
          prerelease: false

   # Get short SHA first
    - name: Get short SHA
      id: short-sha
      run: echo "SHORT_SHA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
    
    # Trigger CD workflow using repository dispatch          
    - name: Trigger deployment
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: build-completed
        client-payload: '{"short_hash": "${{ steps.short-sha.outputs.SHORT_SHA }}", "commit_hash": "${{ github.sha }}", "commit_message": "${{ github.event.head_commit.message }}", "branch": "${{ github.ref_name }}", "env": "${{ env.DEPLOY_ENV }}", "version": "${{ env.VERSION }}"}'
